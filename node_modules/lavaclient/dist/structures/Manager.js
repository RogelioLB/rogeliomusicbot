"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const https = __importStar(require("https"));
const http = __importStar(require("http"));
const events_1 = require("events");
const Structures_1 = require("../Structures");
const defaults = {
    resuming: { key: Math.random().toString(32), timeout: 60000 },
    reconnect: { auto: true, delay: 15000, maxTries: 5 },
    shards: 1,
};
class Manager extends events_1.EventEmitter {
    constructor(nodes, options) {
        super();
        this.plugins = [];
        options = Object.assign(options, defaults);
        this.sockets = new Map();
        this.players = new Map();
        this.nodes = nodes;
        this.options = options;
        this.userId = options.userId;
        this.send = options.send;
        this.resuming = (typeof options.resuming === "boolean"
            ? !options.resuming ? null : defaults.resuming
            : options.resuming ?? defaults.resuming);
        if (!options.send || typeof options.send !== "function")
            throw new TypeError("Please provide a send function for sending packets to discord.");
        if (this.options.shards < 1)
            throw new TypeError("Shard count must be 1 or greater.");
        if (options.plugins && options.plugins.length)
            for (const plugin of options.plugins) {
                this.plugins.push(plugin);
                plugin.load(this);
            }
    }
    get ideal() {
        return [...this.sockets.values()].sort((a, b) => a.penalties - b.penalties);
    }
    init(userId = this.userId) {
        if (!userId)
            throw new Error("Provide a client id for lavalink to use.");
        else
            this.userId = userId;
        for (const plugin of this.plugins)
            plugin.init();
        for (const s of this.nodes) {
            if (!this.sockets.has(s.id)) {
                const socket = new (Structures_1.Structures.get("socket"))(this, s);
                socket.connect();
                this.sockets.set(s.id, socket);
            }
        }
    }
    use(plugin) {
        plugin.load(this);
        this.plugins = this.plugins.concat([plugin]);
        return this;
    }
    async serverUpdate(update) {
        const player = this.players.get(update.guild_id);
        if (player) {
            player.provide(update);
            await player.voiceUpdate();
        }
        return;
    }
    async stateUpdate(update) {
        const player = this.players.get(update.guild_id);
        if (player && update.user_id === this.userId) {
            if (update.channel_id !== player.channel) {
                player.emit("move", update.channel_id);
                player.channel = update.channel_id;
            }
            player.provide(update);
            await player.voiceUpdate();
        }
    }
    create(guild) {
        const id = typeof guild === "string" ? guild : guild.id;
        const existing = this.players.get(id);
        if (existing)
            return existing;
        const sock = this.ideal[0];
        if (!sock)
            throw new Error("Manager#create(): No available nodes.");
        const player = new (Structures_1.Structures.get("player"))(sock, id);
        this.players.set(id, player);
        return player;
    }
    async destroy(guild) {
        const id = typeof guild === "string" ? guild : guild.id;
        const player = this.players.get(id);
        if (player) {
            await player.destroy(true);
            return this.players.delete(id);
        }
        else
            return false;
    }
    async search(query) {
        return new Promise(async (resolve, reject) => {
            const socket = this.ideal[0];
            if (!socket)
                throw new Error("Manager#create(): No available sockets.");
            const { request } = socket.secure ? https : http;
            let res = request(`http${socket.secure ? "s" : ""}://${socket.address}/loadtracks?identifier=${query}`, {
                headers: {
                    authorization: socket.password
                }
            }, (res) => {
                let data = Buffer.alloc(0);
                res.on("data", (chunk) => data = Buffer.concat([data, chunk]));
                res.on("error", (e) => reject(e));
                res.on("end", () => resolve(JSON.parse(data.toString())));
            });
            res.on("error", e => reject(e));
            res.end();
        });
    }
}
exports.Manager = Manager;
