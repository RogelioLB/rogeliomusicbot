"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const events_1 = require("events");
class Player extends events_1.EventEmitter {
    constructor(socket, guild) {
        super();
        this.socket = socket;
        this.guild = guild;
        this.paused = false;
        this.playing = false;
        this.position = 0;
        this.volume = 100;
        this.equalizer = [];
        this.connected = false;
        this.on("playerUpdate", this._playerUpdate.bind(this));
        this.on("event", this._event.bind(this));
    }
    get manager() {
        return this.socket.manager;
    }
    connect(channel, options = {}) {
        const channelId = typeof channel === "object" ? channel?.id : channel;
        this.socket.manager.send(this.guild, {
            op: 4,
            d: {
                guild_id: this.guild,
                channel_id: channelId ? channelId : null,
                self_deaf: options.selfDeaf ?? false,
                self_mute: options.selfMute ?? false
            }
        });
        this.channel = channelId;
        this.connected = !!channelId;
        return this;
    }
    disconnect() {
        return this.connect(null);
    }
    async move(socket) {
        this.socket = socket;
        await this.destroy();
        if (this.channel)
            this.connect(this.channel);
        return this;
    }
    play(track, options = {}) {
        return this.send("play", Object.assign({
            track: typeof track === "object" ? track.track : track
        }, options));
    }
    setVolume(volume = 100) {
        if (volume < 0 || volume > 1000)
            throw new RangeError(`Player#setVolume (${this.guild}): Volume must be within the 0 to 1000 range.`);
        this.volume = volume;
        return this.send("volume", { volume });
    }
    pause(state = true) {
        this.paused = state;
        this.playing = !state;
        return this.send("pause", { pause: state });
    }
    resume() {
        return this.pause(false);
    }
    stop() {
        delete this.track;
        delete this.timestamp;
        this.position = 0;
        return this.send("stop");
    }
    seek(position) {
        if (!this.track)
            throw new Error(`Player#seek() ${this.guild}: Not playing anything.`);
        return this.send("seek", { position });
    }
    setEqualizer(bands) {
        this.equalizer = bands ?? [];
        return this.send("equalizer", { bands });
    }
    async destroy(disconnect = false) {
        if (disconnect)
            await this.disconnect();
        return this.send("destroy");
    }
    provide(update) {
        if ("token" in update)
            this._server = update;
        else
            this._state = update;
        return this;
    }
    async voiceUpdate() {
        if (!this._server || !this._state)
            return;
        await this.send("voiceUpdate", {
            sessionId: this._state.session_id,
            event: this._server,
        }, true);
        delete this._state;
        delete this._server;
    }
    async send(op, data = {}, priority = false) {
        await this.socket.send({ op, ...data, guildId: this.guild }, priority);
        return this;
    }
    async _event(event) {
        switch (event.type) {
            case "TrackEndEvent":
                if (event.reason !== "REPLACED")
                    this.playing = false;
                delete this.timestamp;
                delete this.track;
                this.emit("end", event);
                break;
            case "TrackExceptionEvent":
                this.emit("error", event);
                break;
            case "TrackStartEvent":
                this.playing = true;
                this.track = event.track;
                this.emit("start", event);
                break;
            case "TrackStuckEvent":
                await this.stop();
                this.emit("stuck", event);
                break;
            case "WebSocketClosedEvent":
                this.emit("closed", event);
                break;
        }
    }
    _playerUpdate(update) {
        if (!update.state)
            return;
        this.position = update.state.position;
        this.timestamp = update.state.time;
    }
}
exports.Player = Player;
